// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(100)
  surname           String    @db.VarChar(100)
  email             String    @unique @db.VarChar(100)
  phone             String    @db.VarChar(15)
  birthday          DateTime
  password          String    @db.VarChar(255)
  passwordSetAt     DateTime  @default(now())
  passwordExpiresAt DateTime?
  passwordsHistory  Json?
  loginAttempts     Int       @default(0)
  lockUntil         DateTime?
  gender            GenderUser
  active            Boolean   @default(false)
  role              Role      @default(USER)
  profilePicture    String?   @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isDeleted         Boolean   @default(false)
  sales             Sale[]
  addresses         Address[] @relation("UserAddresses")
}

model Configuration {
  id                    Int  @id @default(autoincrement())
  timeTokenLogin        Int
  timeTokenEmail        Int
  attemptsLogin         Int
  emailVerificationInfo Json
  emailLogin            Json
  emailResetPass        Json
}

model UserActivity {
  id     Int      @id @default(autoincrement())
  email  String   @db.VarChar(255)
  action String   @db.VarChar(255)
  date   DateTime
}

model Employee {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  surname           String    @db.VarChar(255)
  email             String    @unique @db.VarChar(255)
  phone             String    @db.VarChar(20)
  birthday          DateTime
  password          String    @db.VarChar(255)
  passwordSetAt     DateTime  @default(now())
  passwordExpiresAt DateTime
  passwordsHistory  Json?
  loginAttempts     Int       @default(0)
  lockUntil         DateTime?
  gender            GenderUser
  role              Role
  addresses         Address[] @relation("EmployeeAddresses")
  sales             Sale[]    @relation("EmployeeSales")
  auditLogs         Audit[]
}

enum Role {
  USER
  ADMIN
  EMPLOYEE
}

enum GenderUser {
  MALE
  FEMALE
  OTHER
}

enum SaleStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Address {
  id         Int        @id @default(autoincrement())
  street     String
  city       String
  state      String
  country    String
  postalCode String
  colony     String
  users      User[]     @relation("UserAddresses")
  employees  Employee[] @relation("EmployeeAddresses")
  sales      Sale[]     @relation("SaleAddresses")
}



model Audit {
  id        Int            @id @default(autoincrement())
  action    String
  adminId   Int
  date      DateTime       @default(now())
  companyId Int
  company   CompanyProfile @relation(fields: [companyId], references: [id])
  admin     Employee       @relation(fields: [adminId], references: [id])
}

model CompanyProfile {
  id          Int      @id @default(autoincrement())
  title       String
  slogan      String
  logoUrl     String
  contactInfo Json
  auditLog    Audit[]
  socialLinks Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DocumentRegulatory {
  id                Int       @id @default(autoincrement())
  title             String    @db.VarChar(255) 
  content           String    @db.Text
  version           Int?     
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  effectiveDate     DateTime
  isDeleted         Boolean?  @default(false) 
  isCurrentVersion  Boolean?  @default(false)
  previousVersionId Int?   
  status            Status?  
  type              DocumentTypeInter
}

enum Status {
  CURRENT
  NOT_CURRENT
  REMOVED
}

// Enum para el tipo de documento
enum DocumentTypeInter {
  POLICIES
  TERMS_AND_CONDITIONS
  LEGAL_DISCLAIMER
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String     
  description String      
  categoryId  Int         
  category    Category    @relation(fields: [categoryId], references: [id]) 
  genderId    Int         
  gender      Gender      @relation(fields: [genderId], references: [id]) 
  fabricTypeId Int       
  fabricType  FabricType  @relation(fields: [fabricTypeId], references: [id])
  neckTypeId  Int         
  neckType    NeckType    @relation(fields: [neckTypeId], references: [id])
  sleeveTypeId Int       
  sleeveType  SleeveType  @relation(fields: [sleeveTypeId], references: [id]) 
  variants    ProductVariant[] 
}

model Gender {
  id          Int         @id @default(autoincrement())
  name        String     
  products    Product[]  
}

model FabricType {
  id          Int         @id @default(autoincrement())
  name        String      
  products    Product[]   
}

model NeckType {
  id          Int         @id @default(autoincrement())
  name        String      
  products    Product[]   
}

model SleeveType {
  id          Int         @id @default(autoincrement())
  name        String      
  products    Product[]   
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      
  products    Product[]   
  sizePrices  SizePrice[] 
}

model Color {
  id          Int         @id @default(autoincrement())
  name        String      @unique    
  hexValue    String      @unique
  variants    ProductVariant[] 
}

model Size {
  id          Int          @id @default(autoincrement())
  name        String
  variants    ProductVariant[]
  sizePrices  SizePrice[]  // Relaci贸n con SizePrice
}

model SizePrice {
  id          Int         @id @default(autoincrement())
  categoryId  Int
  sizeId      Int
  price       Float
  category    Category    @relation(fields: [categoryId], references: [id])
  size        Size        @relation(fields: [sizeId], references: [id]) // Relaci贸n con Size
}


model ProductVariant {
  id              Int             @id @default(autoincrement())
  productId       Int
  sizeId          Int
  colorId         Int
  price           Float
  stock           Int
  product         Product         @relation(fields: [productId], references: [id])
  size            Size            @relation(fields: [sizeId], references: [id])
  color           Color           @relation(fields: [colorId], references: [id])
  saleDetails     SaleDetail[]    // Relaci贸n inversa con SaleDetail
}


model Sale {
  id               Int        @id @default(autoincrement())
  userId           Int
  addressId        Int
  totalAmount      Float
  status           SaleStatus @default(PENDING)
  employeeId       Int
  shippedAt        DateTime?
  deliveredAt      DateTime?
  references       String?
  betweenStreetOne String?
  betweenStreetTwo String?
  createdAt        DateTime   @default(now())

  user        User         @relation(fields: [userId], references: [id])
  address     Address      @relation("SaleAddresses", fields: [addressId], references: [id])
  employee    Employee     @relation("EmployeeSales", fields: [employeeId], references: [id])
  saleDetails SaleDetail[]
}

model SaleDetail {
  id              Int             @id @default(autoincrement())
  saleId          Int
  productVariantId Int
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  sale            Sale            @relation(fields: [saleId], references: [id])
  productVariant  ProductVariant  @relation(fields: [productVariantId], references: [id])  // Relaci贸n con ProductVariant
}



